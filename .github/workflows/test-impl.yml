name: ⚙️ test
on:
  workflow_call:
    inputs:
      pre_commit:
        description: >
          Run pre-commit.
        required: true
        type: string
      unit_tests:
        description: >
          Run unit tests.
        required: true
        type: string
      invocation_tests:
        description: > 
          Run invocation tests.
        required: true
        type: string
      integration_tests:
        description: >
          Run integration-like workflow submission tests.
        required: true
        type: string
      unit_test_args:
        description: >
          CLI args to pass verbatim to pytest (unit tests).
        required: false
        type: string
        default: ""
      integration_test_args:
        description: >
          CLI args to pass verbatim to pytest (integration tests).
        required: false
        type: string
        default: ""
      ref:
        required: true
        type: string
        description: >
          Git commit reference.
      head-ref:
        required: false
        type: string
        description: >
          Git HEAD reference (branch name).
      full-repo-name:
        required: true
        type: string
        description: >
          Full repository name.
      executable_name:
        required: true
        type: string
        description: >
          Template parameter.
          Root name of executable.
      pytest_args:
        required: true
        type: string
        description: >
          Template parameter.
          Extra arguments to pass to pytest.
      CLI_path:
        required: true
        type: string
        description: >
          Template parameter.
          Path to CLI implementation script.
      CLI_path_win:
        required: true
        type: string
        description: >
          Template parameter.
          Windows path to CLI implementation script.
      CLI_module:
        required: true
        type: string
        description: >
          Template parameter.
          Python module for CLI implementation.
      app_package:
        required: true
        type: string
        description: >
          Template parameter.
          Python package containing application.
      script-branch:
        required: false
        type: string
        description: Which github-support branch to fetch support scripts from.
        default: main
      python-versions:
        required: false
        type: string
        description: The JSON array of Python versions to test with.
        default: '["3.9", "3.10", "3.11", "3.12"]'
      poetry-version:
        required: false
        type: string
        description: Version of Poetry.
        default: "1.4"
      install-timeout-minutes:
        required: false
        type: number
        description: Time to allow for a workflow to install dependencies.
        default: 5
      install-poetry-timeout-minutes:
        required: false
        type: number
        description: Time to allow for a workflow to install poetry.
        default: 5
      unit-test-timeout-minutes:
        required: false
        type: number
        description: Time to allow for a workflow to run unit tests.
        default: 5
      integration-test-timeout-minutes:
        required: false
        type: number
        description: Time to allow for a workflow to run integration tests.
        default: 25
    secrets:
      pre-commit-token:
        required: true
        description: >
          PAT of user who has permission to bypass branch protection,
          or standard GITHUB_TOKEN if running on an external fork
  
# e.g. don't run simultaneously on the same branch (since we may commit to that branch)
concurrency: ci-${{ inputs.head-ref && format('refs/heads/{0}', inputs.head-ref) || inputs.ref }}

jobs:
  pre-commit:
    permissions:
      # Ensure that this workflow part has permission to write to the PR branch.
      # It might not be able to skip CI checks in all cases, but at least it can write!
      contents: write
    runs-on: ubuntu-latest
    if: inputs.pre_commit == 'true'
    timeout-minutes: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.pre-commit-token }}
          # checkout PR source branch (head_ref) if event is pull_request:
          ref: ${{ inputs.head-ref || inputs.ref }}
          repository: ${{ inputs.full-repo-name }}
      - name: Configure git for commits
        uses: hpcflow/github-support/configure-git@main
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run pre-commit
        # avoid exit code 1 (which halts GH actions) from pre-commit run command by
        # running twice:
        run: |
          pip install pre-commit
          pre-commit install
          export SKIP=no-commit-to-branch
          pre-commit run --all-files || pre-commit run --all-files

      - name: pre-commit push changes
        run: |
          if git diff --quiet; then
            echo "No pre-commit changes"
          else
            git commit -am "pre-commit fixes [skip ci]"
            git push
          fi

  test-units:
    needs: pre-commit
    if: inputs.unit_tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-13
          - windows-latest
    permissions:
      # No write permission
      contents: read
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: hpcflow/github-support/setup-poetry@main
        timeout-minutes: ${{ inputs.install-poetry-timeout-minutes }}
        with:
          version: ${{ inputs.poetry-version }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test
          version: ${{ matrix.python-version }}

      - name: Install dependencies
        timeout-minutes: ${{ inputs.install-timeout-minutes }}
        run: |
          poetry install --without dev,pyinstaller

      - name: Run tests
        timeout-minutes: ${{ inputs.unit-test-timeout-minutes }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYTHONUNBUFFERED: ok
        run: |
          poetry run python -m pytest ${{ inputs.pytest_args }} ${{ inputs.unit_test_args }}

  test-units-CentOS:
    needs: pre-commit
    runs-on: ubuntu-latest
    if: inputs.unit_tests == 'true'
    permissions:
      # No write permission
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test
          version: CentOS

      - name: Run unit tests within Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/hpcflow/centos7-poetry:latest
          options: -v ${{ github.workspace }}:/home --env GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          run: |
            cd /home
            poetry config virtualenvs.in-project true
            poetry config installer.modern-installation false
            poetry install --without dev,pyinstaller
            export PYTHONUNBUFFERED=ok
            poetry run python -m pytest ${{ inputs.unit_test_args }}
        timeout-minutes: ${{ inputs.unit-test-timeout-minutes }}

  test-integration:
    needs: pre-commit
    if: inputs.integration_tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
        os:
          - ubuntu-latest
          - macos-13
          - windows-latest
    permissions:
      # No write permission
      contents: read
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: hpcflow/github-support/setup-poetry@main
        timeout-minutes: ${{ inputs.install-poetry-timeout-minutes }}
        with:
          version: ${{ inputs.poetry-version }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test-integration
          version: ${{ matrix.python-version }}

      - name: Install dependencies
        timeout-minutes: ${{ inputs.install-timeout-minutes }}
        run: |
          poetry install --without dev,pyinstaller

      - name: Run integration tests
        timeout-minutes: ${{ inputs.integration-test-timeout-minutes }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYTHONUNBUFFERED: ok
        run: |
          poetry run ${{ inputs.executable_name }} test ${{ inputs.pytest_args }} --integration ${{ inputs.integration_test_args }}

  test-integration-CentOS:
    needs: pre-commit
    runs-on: ubuntu-latest
    if: inputs.integration_tests == 'true'
    permissions:
      # No write permission
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test-integration
          version: CentOS

      - name: Run integration tests within Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/hpcflow/centos7-poetry:latest
          options: -v ${{ github.workspace }}:/home --env GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          run: |
            cd /home
            poetry config virtualenvs.in-project true
            poetry config installer.modern-installation false
            poetry install --without dev,pyinstaller
            export PYTHONUNBUFFERED=ok
            poetry run ${{ inputs.executable_name }} test --integration ${{ inputs.integration_test_args }}
        timeout-minutes: ${{ inputs.integration-test-timeout-minutes }}

  test-invocation-ubuntu:
    if: inputs.invocation_tests == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    permissions:
      # No write permission
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Checkout supporting test infrastructure
        uses: actions/checkout@v4
        with:
          repository: hpcflow/github-support
          path: github-support
          ref: ${{ inputs.script-branch }}
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: hpcflow/github-support/setup-poetry@main
        id: poetry
        timeout-minutes: ${{ inputs.install-poetry-timeout-minutes }}
        with:
          version: ${{ inputs.poetry-version }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test-invocation
          version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          poetry install --without dev,pyinstaller
          poetry run pip install ipython
        timeout-minutes: ${{ inputs.install-timeout-minutes }}

      - name: Prepare test data
        id: prep-test-data
        run: |
          echo "exe-path=${PY//python/$EXE_NAME}" >> $GITHUB_OUTPUT
          mkdir papermill_out
        env:
          EXE_NAME: ${{ inputs.executable_name }}
          PY: ${{ steps.poetry.outputs.python-path }}

      - name: Test invocation command with `python ./${{ inputs.CLI_path }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python ./${{ inputs.CLI_path }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with `python -m ${{ inputs.CLI_module }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python -m ${{ inputs.CLI_module }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with `${{ inputs.executable_name }}` entry point script
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: ${{ inputs.executable_name }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ steps.prep-test-data.outputs.exe-path }}')"

      - name: Test invocation command within a python script
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd.py ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with interactive python
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd_interactive.py python ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with interactive ipython
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd_interactive.py ipython ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test direct workflow submission within a python script
        run: |
          source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          python github-support/scripts/test_direct_sub_python_script.py ${{ inputs.app_package }}

      - name: Test direct workflow submission within a Jupyter notebook (via papermill)
        run: |
          source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          python -m ipykernel install --user --name python3
          papermill github-support/scripts/test_direct_sub_jupyter_notebook.ipynb papermill_out/test_direct_sub_jupyter_notebook_${{ matrix.python-version }}_${{ runner.os }}.ipynb -p app_import_str ${{ inputs.app_package }}

  test-invocation-macos:
    if: inputs.invocation_tests == 'true'
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    permissions:
      # No write permission
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Checkout supporting test infrastructure
        uses: actions/checkout@v4
        with:
          repository: hpcflow/github-support
          path: github-support
          ref: ${{ inputs.script-branch }}
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: hpcflow/github-support/setup-poetry@main
        id: poetry
        timeout-minutes: ${{ inputs.install-poetry-timeout-minutes }}
        with:
          version: ${{ inputs.poetry-version }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test-invocation
          version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          poetry install --without dev,pyinstaller
          poetry run pip install ipython
        timeout-minutes: ${{ inputs.install-timeout-minutes }}

      - name: Prepare test data
        id: prep-test-data
        run: |
          echo "exe-path=${PY//python/$EXE_NAME}" >> $GITHUB_OUTPUT
          mkdir papermill_out
        env:
          EXE_NAME: ${{ inputs.executable_name }}
          PY: ${{ steps.poetry.outputs.python-path }}

      - name: Test invocation command with `python ./${{ inputs.CLI_path }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python ./${{ inputs.CLI_path }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with `python -m ${{ inputs.CLI_module }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python -m ${{ inputs.CLI_module }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with `${{ inputs.executable_name }}` entry point script
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: ${{ inputs.executable_name }} internal get-invoc-cmd
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ steps.prep-test-data.outputs.exe-path }}')"

      - name: Test invocation command within a python script
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd.py ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with interactive python
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd_interactive.py python ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test invocation command with interactive ipython
        uses: hpcflow/github-support/compare@main
        with:
          init: source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          command: python github-support/scripts/get_invoc_cmd_interactive.py ipython ${{ inputs.app_package }}
          expected: "('${{ steps.poetry.outputs.python-path }}', '${{ github.workspace }}/${{ inputs.CLI_path }}')"

      - name: Test direct workflow submission within a python script
        run: |
          source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          python github-support/scripts/test_direct_sub_python_script.py ${{ inputs.app_package }}

      - name: Test direct workflow submission within a Jupyter notebook (via papermill)
        run: |
          source ${{ steps.poetry.outputs.poetry-path }}/bin/activate
          python -m ipykernel install --user --name python3
          papermill github-support/scripts/test_direct_sub_jupyter_notebook.ipynb papermill_out/test_direct_sub_jupyter_notebook_${{ matrix.python-version }}_${{ runner.os }}.ipynb -p app_import_str ${{ inputs.app_package }}

  test-invocation-windows:
    if: inputs.invocation_tests == 'true'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
    permissions:
      # No write permission
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Checkout supporting test infrastructure
        uses: actions/checkout@v4
        with:
          repository: hpcflow/github-support
          path: github-support
          ref: ${{ inputs.script-branch }}
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up poetry
        uses: hpcflow/github-support/setup-poetry@main
        id: poetry
        timeout-minutes: ${{ inputs.install-poetry-timeout-minutes }}
        with:
          version: ${{ inputs.poetry-version }}
      - name: Cache dependencies
        uses: hpcflow/github-support/init-cache@main
        with:
          name: test-invocation
          version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          poetry install --without dev,pyinstaller
        timeout-minutes: ${{ inputs.install-timeout-minutes }}

      - name: Prepare test data
        id: prep-test-data
        run: |
          ("python-path=" + $Env:PY.Replace('\', '\\')) | Out-File $Env:GITHUB_OUTPUT -Append
          ("cli-path=$Env:GITHUB_WORKSPACE\$Env:CLI_PATH".Replace('\', '\\')) | Out-File $Env:GITHUB_OUTPUT -Append
          ("exe-path=$Env:PY".Replace('python.exe', $Env:EXE_NAME).Replace('\', '\\')) | Out-File $Env:GITHUB_OUTPUT -Append
          New-Item -ItemType Directory -Path papermill_out
        env:
          CLI_PATH: ${{ inputs.CLI_path_win }}
          EXE_NAME: ${{ inputs.executable_name }}
          PY: ${{ steps.poetry.outputs.python-path }}

      - name: Test invocation command with `python ./${{ inputs.CLI_path }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          command: python ./${{ inputs.CLI_path }} internal get-invoc-cmd
          expected: "('${{ steps.prep-test-data.outputs.python-path }}', '${{ steps.prep-test-data.outputs.cli-path }}')"

      - name: Test invocation command with `python -m ${{ inputs.CLI_module }}`
        uses: hpcflow/github-support/compare@main
        with:
          init: ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          command: python -m ${{ inputs.CLI_module }} internal get-invoc-cmd
          expected: "('${{ steps.prep-test-data.outputs.python-path }}', '${{ steps.prep-test-data.outputs.cli-path }}')"

      - name: Test invocation command with `${{ inputs.executable_name }}` entry point script
        uses: hpcflow/github-support/compare@main
        with:
          init: ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          command: ${{ inputs.executable_name }} internal get-invoc-cmd
          expected: "('${{ steps.prep-test-data.outputs.python-path }}', '${{ steps.prep-test-data.outputs.exe-path }}')"

      - name: Test invocation command within a python script
        uses: hpcflow/github-support/compare@main
        with:
          init: ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          command: python github-support\scripts\get_invoc_cmd.py ${{ inputs.app_package }}
          expected: "('${{ steps.prep-test-data.outputs.python-path }}', '${{ steps.prep-test-data.outputs.cli-path }}')"

      - name: Test direct workflow submission within a python script
        run: |
          ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          python github-support\scripts\test_direct_sub_python_script.py ${{ inputs.app_package }}

      - name: Test direct workflow submission within a Jupyter notebook (via papermill)
        run: |
          ."${{ steps.poetry.outputs.poetry-path }}\Scripts\activate.ps1"
          python -m ipykernel install --user --name python3
          papermill github-support\scripts\test_direct_sub_jupyter_notebook.ipynb papermill_out\test_direct_sub_jupyter_notebook_${{ matrix.python-version }}_${{ runner.os }}.ipynb -p app_import_str ${{ inputs.app_package }}
